//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.3.0, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TestEntity {

    public AnyStandardEventAddedListenerComponent AnyStandardEventAddedListener { get { return (AnyStandardEventAddedListenerComponent)GetComponent(TestComponentsLookup.AnyStandardEventAddedListener); } }
    public bool HasAnyStandardEventAddedListener { get { return HasComponent(TestComponentsLookup.AnyStandardEventAddedListener); } }

    public void AddAnyStandardEventAddedListener(System.Collections.Generic.List<IAnyStandardEventAddedListener> newValue) {
        var index = TestComponentsLookup.AnyStandardEventAddedListener;
        var component = (AnyStandardEventAddedListenerComponent)CreateComponent(index, typeof(AnyStandardEventAddedListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAnyStandardEventAddedListener(System.Collections.Generic.List<IAnyStandardEventAddedListener> newValue) {
        var index = TestComponentsLookup.AnyStandardEventAddedListener;
        var component = (AnyStandardEventAddedListenerComponent)CreateComponent(index, typeof(AnyStandardEventAddedListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

	public void CopyAnyStandardEventAddedListenerTo(AnyStandardEventAddedListenerComponent copyComponent) {
        var index = TestComponentsLookup.AnyStandardEventAddedListener;
        var component = (AnyStandardEventAddedListenerComponent)CreateComponent(index, typeof(AnyStandardEventAddedListenerComponent));
        component.value = copyComponent.value;
        ReplaceComponent(index, component);
    }

    public void RemoveAnyStandardEventAddedListener() {
        RemoveComponent(TestComponentsLookup.AnyStandardEventAddedListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.3.0, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TestMatcher {

    static JCMG.EntitasRedux.IMatcher<TestEntity> _matcherAnyStandardEventAddedListener;

    public static JCMG.EntitasRedux.IMatcher<TestEntity> AnyStandardEventAddedListener {
        get {
            if (_matcherAnyStandardEventAddedListener == null) {
                var matcher = (JCMG.EntitasRedux.Matcher<TestEntity>)JCMG.EntitasRedux.Matcher<TestEntity>.AllOf(TestComponentsLookup.AnyStandardEventAddedListener);
                matcher.ComponentNames = TestComponentsLookup.ComponentNames;
                _matcherAnyStandardEventAddedListener = matcher;
            }

            return _matcherAnyStandardEventAddedListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.3.0, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TestEntity {

    public void AddAnyStandardEventAddedListener(IAnyStandardEventAddedListener value) {
        var listeners = HasAnyStandardEventAddedListener
            ? AnyStandardEventAddedListener.value
            : new System.Collections.Generic.List<IAnyStandardEventAddedListener>();
        listeners.Add(value);
        ReplaceAnyStandardEventAddedListener(listeners);
    }

    public void RemoveAnyStandardEventAddedListener(IAnyStandardEventAddedListener value, bool removeComponentWhenEmpty = true) {
        var listeners = AnyStandardEventAddedListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnyStandardEventAddedListener();
        } else {
            ReplaceAnyStandardEventAddedListener(listeners);
        }
    }
}
