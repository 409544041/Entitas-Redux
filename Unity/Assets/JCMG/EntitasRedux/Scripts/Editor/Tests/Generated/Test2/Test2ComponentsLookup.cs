//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.2.1, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class Test2ComponentsLookup {

    public const int ClassToGenerate = 0;
    public const int EntityIndex = 1;
    public const int MultipleContextStandardEvent = 2;
    public const int MultipleEntityIndices = 3;
    public const int MultipleEventsStandardEvent = 4;
    public const int MyNamespace = 5;
    public const int NameAge = 6;
    public const int Test2Context = 7;
    public const int EventToGenerate = 8;
    public const int Test2AnyEventToGenerateListener = 9;
    public const int Test2AnyMultipleContextStandardEventListener = 10;
    public const int Test2AnyMultipleEventsStandardEventListener = 11;
    public const int Test2MultipleEventsStandardEventRemovedListener = 12;
    public const int UniqueClassToGenerate = 13;

    public const int TotalComponents = 14;

    public static readonly string[] ComponentNames = {
        "ClassToGenerate",
        "EntityIndex",
        "MultipleContextStandardEvent",
        "MultipleEntityIndices",
        "MultipleEventsStandardEvent",
        "MyNamespace",
        "NameAge",
        "Test2Context",
        "EventToGenerate",
        "Test2AnyEventToGenerateListener",
        "Test2AnyMultipleContextStandardEventListener",
        "Test2AnyMultipleEventsStandardEventListener",
        "Test2MultipleEventsStandardEventRemovedListener",
        "UniqueClassToGenerate"
    };

    public static readonly System.Type[] ComponentTypes = {
        typeof(ClassToGenerateComponent),
        typeof(EntitasRedux.Tests.EntityIndexComponent),
        typeof(EntitasRedux.Tests.MultipleContextStandardEventComponent),
        typeof(EntitasRedux.Tests.MultipleEntityIndicesComponent),
        typeof(EntitasRedux.Tests.MultipleEventsStandardEventComponent),
        typeof(EntitasRedux.Tests.MyNamespaceComponent),
        typeof(EntitasRedux.Tests.NameAgeComponent),
        typeof(EntitasRedux.Tests.Test2ContextComponent),
        typeof(EventToGenerateComponent),
        typeof(Test2AnyEventToGenerateListenerComponent),
        typeof(Test2AnyMultipleContextStandardEventListenerComponent),
        typeof(Test2AnyMultipleEventsStandardEventListenerComponent),
        typeof(Test2MultipleEventsStandardEventRemovedListenerComponent),
        typeof(UniqueClassToGenerateComponent)
    };

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
        { typeof(ClassToGenerateComponent), 0 },
        { typeof(EntitasRedux.Tests.EntityIndexComponent), 1 },
        { typeof(EntitasRedux.Tests.MultipleContextStandardEventComponent), 2 },
        { typeof(EntitasRedux.Tests.MultipleEntityIndicesComponent), 3 },
        { typeof(EntitasRedux.Tests.MultipleEventsStandardEventComponent), 4 },
        { typeof(EntitasRedux.Tests.MyNamespaceComponent), 5 },
        { typeof(EntitasRedux.Tests.NameAgeComponent), 6 },
        { typeof(EntitasRedux.Tests.Test2ContextComponent), 7 },
        { typeof(EventToGenerateComponent), 8 },
        { typeof(Test2AnyEventToGenerateListenerComponent), 9 },
        { typeof(Test2AnyMultipleContextStandardEventListenerComponent), 10 },
        { typeof(Test2AnyMultipleEventsStandardEventListenerComponent), 11 },
        { typeof(Test2MultipleEventsStandardEventRemovedListenerComponent), 12 },
        { typeof(UniqueClassToGenerateComponent), 13 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
