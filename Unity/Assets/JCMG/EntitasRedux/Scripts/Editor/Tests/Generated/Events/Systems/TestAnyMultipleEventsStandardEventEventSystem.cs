//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.2.1, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed class TestAnyMultipleEventsStandardEventEventSystem : JCMG.EntitasRedux.ReactiveSystem<TestEntity> {

    readonly JCMG.EntitasRedux.IGroup<TestEntity> _listeners;
    readonly System.Collections.Generic.List<TestEntity> _entityBuffer;
    readonly System.Collections.Generic.List<ITestAnyMultipleEventsStandardEventListener> _listenerBuffer;

    public TestAnyMultipleEventsStandardEventEventSystem(Contexts contexts) : base(contexts.Test) {
        _listeners = contexts.Test.GetGroup(TestMatcher.TestAnyMultipleEventsStandardEventListener);
        _entityBuffer = new System.Collections.Generic.List<TestEntity>();
        _listenerBuffer = new System.Collections.Generic.List<ITestAnyMultipleEventsStandardEventListener>();
    }

    protected override JCMG.EntitasRedux.ICollector<TestEntity> GetTrigger(JCMG.EntitasRedux.IContext<TestEntity> context) {
        return JCMG.EntitasRedux.CollectorContextExtension.CreateCollector(
            context, JCMG.EntitasRedux.TriggerOnEventMatcherExtension.Added(TestMatcher.MultipleEventsStandardEvent)
        );
    }

    protected override bool Filter(TestEntity entity) {
        return entity.HasMultipleEventsStandardEvent;
    }

    protected override void Execute(System.Collections.Generic.List<TestEntity> entities) {
        foreach (var e in entities) {
            var component = e.MultipleEventsStandardEvent;
            foreach (var listenerEntity in _listeners.GetEntities(_entityBuffer)) {
                _listenerBuffer.Clear();
                _listenerBuffer.AddRange(listenerEntity.TestAnyMultipleEventsStandardEventListener.value);
                foreach (var listener in _listenerBuffer) {
                    listener.OnAnyMultipleEventsStandardEvent(e, component.value);
                }
            }
        }
    }
}
