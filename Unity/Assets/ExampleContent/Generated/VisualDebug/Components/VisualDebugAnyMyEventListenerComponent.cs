//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.2.1, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class VisualDebugEntity {

    public AnyMyEventListenerComponent AnyMyEventListener { get { return (AnyMyEventListenerComponent)GetComponent(VisualDebugComponentsLookup.AnyMyEventListener); } }
    public bool HasAnyMyEventListener { get { return HasComponent(VisualDebugComponentsLookup.AnyMyEventListener); } }

    public void AddAnyMyEventListener(System.Collections.Generic.List<IAnyMyEventListener> newValue) {
        var index = VisualDebugComponentsLookup.AnyMyEventListener;
        var component = (AnyMyEventListenerComponent)CreateComponent(index, typeof(AnyMyEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAnyMyEventListener(System.Collections.Generic.List<IAnyMyEventListener> newValue) {
        var index = VisualDebugComponentsLookup.AnyMyEventListener;
        var component = (AnyMyEventListenerComponent)CreateComponent(index, typeof(AnyMyEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

	public void CopyAnyMyEventListenerTo(AnyMyEventListenerComponent copyComponent) {
        var index = VisualDebugComponentsLookup.AnyMyEventListener;
        var component = (AnyMyEventListenerComponent)CreateComponent(index, typeof(AnyMyEventListenerComponent));
        component.value = copyComponent.value;
        ReplaceComponent(index, component);
    }

    public void RemoveAnyMyEventListener() {
        RemoveComponent(VisualDebugComponentsLookup.AnyMyEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.2.1, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class VisualDebugMatcher {

    static JCMG.EntitasRedux.IMatcher<VisualDebugEntity> _matcherAnyMyEventListener;

    public static JCMG.EntitasRedux.IMatcher<VisualDebugEntity> AnyMyEventListener {
        get {
            if (_matcherAnyMyEventListener == null) {
                var matcher = (JCMG.EntitasRedux.Matcher<VisualDebugEntity>)JCMG.EntitasRedux.Matcher<VisualDebugEntity>.AllOf(VisualDebugComponentsLookup.AnyMyEventListener);
                matcher.ComponentNames = VisualDebugComponentsLookup.ComponentNames;
                _matcherAnyMyEventListener = matcher;
            }

            return _matcherAnyMyEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v1.2.1, branch:develop).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class VisualDebugEntity {

    public void AddAnyMyEventListener(IAnyMyEventListener value) {
        var listeners = HasAnyMyEventListener
            ? AnyMyEventListener.value
            : new System.Collections.Generic.List<IAnyMyEventListener>();
        listeners.Add(value);
        ReplaceAnyMyEventListener(listeners);
    }

    public void RemoveAnyMyEventListener(IAnyMyEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = AnyMyEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnyMyEventListener();
        } else {
            ReplaceAnyMyEventListener(listeners);
        }
    }
}
